/**
* Servlet made for displaying files from a particular directory
*
* Author: Josh Kariyathu
*
* Working: A servlet has its own URL which is generated by the server. The
* servlet code process' the request, (URL request) and can be manipulated
* depending on whats needed
*/
package edu.vt.sis.utils;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.*;
import java.util.Arrays;
import java.net.URLEncoder;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
public class TestResults extends HttpServlet {

private static final String ENCODING = "UTF-8";
/**
* Processes the URL Request
* Manipulates it with parameters to display directory structure and to read files
*/
  protected void processRequest(HttpServletRequest request, HttpServletResponse response)
          throws ServletException, IOException
  {
      // Setting the content type to text/html so when using html tags, it displays in html
      response.setContentType("text/html");

      /*
        The servlet is setup in such a way that every link (href. src tags)
        have a paramter called file and its defined by ?file=
        The path string contains the value of the parameter, i.e everything after
        ?file=
      */
      String path = request.getParameter("file");

      // when the path is null, it displays the results directory using PrintWriter
      if (path == null)
      {
        PrintWriter out = response.getWriter();

        // printing out html to the browser
        out.println("<!DOCTYPE html>");
        out.println("<html>");
        out.println("<head>");
        out.println("<title>Results Folder</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h3>Results Folder</h3>");
        out.println("<br>");

        // Reading the directory to display
        File directory = new File("/apps/home/appsadm/apps/src/selenium-grid-setup/grid-setup/hub/results/");
        String encodedPath;

        // Array of Files which contains all the files in the main directory
        File[] list = directory.listFiles();



        // Obtain the array of (file, timestamp) pairs.
        //File[] files = directory.listFiles();
        Pair[] pairs = new Pair[list.length];
        for (int i = 0; i < list.length; i++)
            pairs[i] = new Pair(list[i]);

        // Sort them by timestamp.
        Arrays.sort(pairs);

        // Take the sorted pairs and extract only the file part, discarding the timestamp.
        for (int i = list.length -1 ; i >= 0; i--)
            list[i] = pairs[i].f;







        for (File l : list)
        {
            // Added + for a directory and - for a file (easy to understand)
            if (l.isDirectory())
            {
              out.println("<a href=\"?file=" + URLEncoder.encode(l.getAbsolutePath(),ENCODING) + "\">"+"+ "+l.getName()+"</a><br>");
            }
            else
            {
              out.println("<a href=\"?file=" + URLEncoder.encode(l.getAbsolutePath(),ENCODING) + "\">"+"- "+l.getName()+"</a><br>");
            }
        }
        out.close();
      }
      // if Path is not null, Checks if the path contains a directory or a file
      else
      {
          File file = new File(path);
          // If the path is a directory it lists the contents of the directory
          if (file.isDirectory())
          {
            listDirectory(file, response);
          }
          /* If the path is a file, it reads the file and then displays the content
           * of the file, line by line
          */
          else
          {

              PrintWriter out = response.getWriter();
              System.out.println(path);
              /*
              * When reading/displaying and html file, the href and src tags have
              * paths that the servlet does not know. This code converts the hfref
              * and src tags URL with ?file parameter and absolute path of the file.
              */
              try
              {

                  FileReader fileReader = new FileReader(file);
                  BufferedReader bufferedReader = new BufferedReader(fileReader);
                  String line;
                  while ((line = bufferedReader.readLine()) != null)
                  {
                      // Checks if the current line has href or src tags
                      if (line.indexOf("href") != -1 || line.indexOf("src") != -1)
                      {
                        int indexOfHref;
                        int numberOfPlaces;
                        if (line.indexOf("href") != -1)
                        {
                          indexOfHref = line.indexOf("href");
                          numberOfPlaces = 6;
                        }
                        else
                        {
                          indexOfHref = line.indexOf("src");
                          numberOfPlaces = 5;
                        }
                        /*
                        * Splitting the line to 3 parts
                        * First - Contains everything till the word href/src
                        * middle contains: src=" or href="
                        * charcter contains: ' or "
                        * temp contains everything after href=" or src="
                        * final string typically contains: "</a> and beyond
                        *
                        * When hrefContent has # as the link, it adds the file name
                        * to the hrefContent to prevent an error in loading
                        *
                        * Some html files have '' for paths or ""
                        * the code processes for both path types
                        *
                        * If the path starts with ./ it removes it and adds the
                        * absolute path
                        */
                        String first = line.substring(0,indexOfHref);
                        String middle = line.substring(indexOfHref,indexOfHref+numberOfPlaces);
                        String temp = line.substring(indexOfHref+numberOfPlaces);
                        String character = line.substring(indexOfHref+(numberOfPlaces-1), indexOfHref+numberOfPlaces);
                        String finalStr = null;
                        String hrefcontent = null;
                        if (temp.indexOf(character) != -1)
                        {
                          hrefcontent = temp.substring(0, temp.indexOf(character));
                          finalStr = temp.substring(temp.indexOf(character));

                        }
                        if (hrefcontent.substring(0,1).equals("#"))
                        {
                          hrefcontent = file.getName() + hrefcontent;
                        }
                        // Prevent index outofbounds error
                        if (hrefcontent.length() > 2)
                        {
                          if (hrefcontent.substring(0,2).equals("./"))
                          {
                            hrefcontent = hrefcontent.substring(2);
                          }
                        }

                        System.out.println("HREF CONTENT: " + hrefcontent);
                        hrefcontent = hrefcontent.replaceAll("/", "%2F");
                        hrefcontent = hrefcontent.replaceAll(" ", "+");

                        // contains the absolute path for the file with the encoded path
                        // every / in the path is converted to %2F
                        String newAppendStr = "?file=" + URLEncoder.encode(file.getParentFile().getAbsolutePath(),ENCODING) + "%2F" + hrefcontent + finalStr;

                        out.println(first+middle+newAppendStr);
                      }
                      else
                      {
                        out.println(line);
                      }
                  }
                  fileReader.close();

            }
            catch (IOException e)
            {
              e.printStackTrace();
            }

              out.close();
        }
    }
  }
  /**
  * Blocks the user from accessing any other part of the file system
  * By checking for "results" in the absolute path
  */
  private boolean blockDirectories(File file)
  {
    String path = file.getAbsolutePath();
    if (path.indexOf("results") != -1)
    {
      return false;
    }

      return true;



  }
  /**
  * List all the files in the directory
  * param file - Directory to display
  * param response - the HTMLServletResponse
  */
  private void listDirectory(File file, HttpServletResponse response) throws IOException
  {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    File[] list = file.listFiles();
    Pair[] pairs = new Pair[list.length];
    for (int i = 0; i < list.length; i++)
        pairs[i] = new Pair(list[i]);

    // Sort them by timestamp.
    Arrays.sort(pairs);

    // Take the sorted pairs and extract only the file part, discarding the timestamp.
    for (int i = list.length - 1; i >= 0; i--)
        list[i] = pairs[i].f;

    if (blockDirectories(file))
    {
      out.println("Access Denied");
      out.println("<a href=\"http://roswell.seti.vt.edu:4444/grid/admin/TestResults/\">Back to Results</a>");
      out.close();
    }
    else if (file.getName().equals("results"))
    {
      out.println("<h3>Results Folder</h3>");
      out.println("<br>");
      System.out.println("Trying to display results directory");
      for (File l : list)
      {

        if (l.isDirectory())
        {
          out.println("<a href=\"?file=" + URLEncoder.encode(l.getAbsolutePath(),ENCODING) + "\">"+"+ "+l.getName()+"</a><br>");
        }
        else
        {
          out.println("<a href=\"?file=" + URLEncoder.encode(l.getAbsolutePath(),ENCODING) + "\">"+"- "+l.getName()+"</a><br>");
        }

      }
      out.close();
    }
    else
    {
      out.println("<h3><i>Folder: " + file.getName() + "</h3></i>");
      out.println("<br>");
      out.println("<a href=\"?file=" + URLEncoder.encode(file.getParentFile().getAbsolutePath(),ENCODING) + "\">"+".."+"</a><br>");

      for (File l : list)
      {

        if (l.isDirectory())
        {
          out.println("<a href=\"?file=" + URLEncoder.encode(l.getAbsolutePath(),ENCODING) + "\">"+"+ "+l.getName()+"</a><br>");
        }
        else
        {
          out.println("<a href=\"?file=" + URLEncoder.encode(l.getAbsolutePath(),ENCODING) + "\">"+"- "+l.getName()+"</a><br>");
        }

      }
      out.close();
    }


  }
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
  {
  processRequest(request, response);
  }


  @Override
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
  {
    processRequest(request, response);
  }


  @Override
  public String getServletInfo()
  {
    return "Short description";
  }

  class Pair implements Comparable {
      public long t;
      public File f;

      public Pair(File file) {
          f = file;
          t = file.lastModified();
      }

      public int compareTo(Object o) {
          long u = ((Pair) o).t;
          return t < u ? -1 : t == u ? 0 : 1;
      }
  }


}
